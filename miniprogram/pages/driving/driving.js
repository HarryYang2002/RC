"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const routing_1 = require("../../utils/routing");
const centPerSec = 0.7;
function formatDuration(sec) {
    const padString = (n) => n < 10 ? '0' + n.toFixed(0) : n.toFixed(0);
    const h = Math.floor(sec / 3600);
    sec -= 3600 * h;
    const m = Math.floor(sec / 60);
    sec -= 60 * m;
    const s = Math.floor(sec);
    return `${padString(h)}:${padString(m)}:${padString(s)}`;
}
function formatFee(cents) {
    return (cents / 100).toFixed(2);
}
Page({
    timer: undefined,
    data: {
        location: {
            latitude: 32.92,
            longitude: 118.46,
        },
        scale: 14,
        elapsed: '00:00:00',
        fee: '0.00',
    },
    onLoad(opt) {
        const o = opt;
        console.log("current trip", o.trip_id);
        this.setupLocationUpdator();
        this.setupTimer();
    },
    onUnload() {
        wx.stopLocationUpdate();
        if (this.timer) {
            clearInterval(this.timer);
        }
    },
    setupLocationUpdator() {
        wx.startLocationUpdate({
            fail: console.error,
        });
        wx.onLocationChange(loc => {
            console.log("location: ", loc);
            this.setData({
                location: {
                    latitude: loc.latitude,
                    longitude: loc.longitude,
                },
            });
        });
    },
    setupTimer() {
        let elapsedSec = 0;
        let cents = 0;
        this.timer = setInterval(() => {
            elapsedSec++;
            cents += centPerSec;
            this.setData({
                elapsed: formatDuration(elapsedSec),
                fee: formatFee(cents),
            });
        }, 1000);
    },
    onEndTripTap() {
        wx.redirectTo({
            url: routing_1.routing.mytrips(),
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRyaXZpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxpREFBOEM7QUFFOUMsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFBO0FBRXRCLFNBQVMsY0FBYyxDQUFDLEdBQVc7SUFDL0IsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ2hDLEdBQUcsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDOUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDYixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pCLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQzVELENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFhO0lBQzVCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ25DLENBQUM7QUFFRCxJQUFJLENBQUM7SUFDRCxLQUFLLEVBQUUsU0FBK0I7SUFDdEMsSUFBSSxFQUFFO1FBQ0YsUUFBUSxFQUFFO1lBQ04sUUFBUSxFQUFFLEtBQUs7WUFDZixTQUFTLEVBQUUsTUFBTTtTQUNwQjtRQUNELEtBQUssRUFBRSxFQUFFO1FBQ1QsT0FBTyxFQUFFLFVBQVU7UUFDbkIsR0FBRyxFQUFFLE1BQU07S0FDZDtJQUVELE1BQU0sQ0FBQyxHQUE4QjtRQUNqQyxNQUFNLENBQUMsR0FBd0IsR0FBRyxDQUFBO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQTtRQUMzQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDckIsQ0FBQztJQUNELFFBQVE7UUFDSixFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQTtRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQzVCO0lBQ0wsQ0FBQztJQUVELG9CQUFvQjtRQUNoQixFQUFFLENBQUMsbUJBQW1CLENBQUM7WUFDbkIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3RCLENBQUMsQ0FBQTtRQUNGLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNULFFBQVEsRUFBRTtvQkFDTixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7b0JBQ3RCLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUztpQkFDM0I7YUFDSixDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxVQUFVO1FBQ04sSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO1FBQ2xCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUMxQixVQUFVLEVBQUUsQ0FBQTtZQUNaLEtBQUssSUFBSSxVQUFVLENBQUE7WUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxPQUFPLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQztnQkFDbkMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUM7YUFDeEIsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ1osQ0FBQztJQUVELFlBQVk7UUFDUixFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1YsR0FBRyxFQUFDLGlCQUFPLENBQUMsT0FBTyxFQUFFO1NBQ3hCLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWdlcy9kcml2aW5nL2RyaXZpbmcudHNcblxuaW1wb3J0IHsgcm91dGluZyB9IGZyb20gXCIuLi8uLi91dGlscy9yb3V0aW5nXCI7XG5cbmNvbnN0IGNlbnRQZXJTZWMgPSAwLjdcblxuZnVuY3Rpb24gZm9ybWF0RHVyYXRpb24oc2VjOiBudW1iZXIpIHtcbiAgICBjb25zdCBwYWRTdHJpbmcgPSAobjogbnVtYmVyKSA9PiBuIDwgMTAgPyAnMCcgKyBuLnRvRml4ZWQoMCkgOiBuLnRvRml4ZWQoMCk7XG4gICAgY29uc3QgaCA9IE1hdGguZmxvb3Ioc2VjIC8gMzYwMClcbiAgICBzZWMgLT0gMzYwMCAqIGhcbiAgICBjb25zdCBtID0gTWF0aC5mbG9vcihzZWMgLyA2MClcbiAgICBzZWMgLT0gNjAgKiBtXG4gICAgY29uc3QgcyA9IE1hdGguZmxvb3Ioc2VjKVxuICAgIHJldHVybiBgJHtwYWRTdHJpbmcoaCl9OiR7cGFkU3RyaW5nKG0pfToke3BhZFN0cmluZyhzKX1gXG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZlZShjZW50czogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChjZW50cyAvIDEwMCkudG9GaXhlZCgyKVxufVxuXG5QYWdlKHtcbiAgICB0aW1lcjogdW5kZWZpbmVkIGFzIG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICBkYXRhOiB7XG4gICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICBsYXRpdHVkZTogMzIuOTIsXG4gICAgICAgICAgICBsb25naXR1ZGU6IDExOC40NixcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGU6IDE0LFxuICAgICAgICBlbGFwc2VkOiAnMDA6MDA6MDAnLFxuICAgICAgICBmZWU6ICcwLjAwJyxcbiAgICB9LFxuXG4gICAgb25Mb2FkKG9wdDogUmVjb3JkPFwidHJpcF9pZFwiLCBzdHJpbmc+KSB7XG4gICAgICAgIGNvbnN0IG86IHJvdXRpbmcuRHJpdmluZ09wdHMgPSBvcHRcbiAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50IHRyaXBcIiwgby50cmlwX2lkKTtcbiAgICAgICAgdGhpcy5zZXR1cExvY2F0aW9uVXBkYXRvcigpXG4gICAgICAgIHRoaXMuc2V0dXBUaW1lcigpXG4gICAgfSxcbiAgICBvblVubG9hZCgpIHtcbiAgICAgICAgd3guc3RvcExvY2F0aW9uVXBkYXRlKClcbiAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcilcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXR1cExvY2F0aW9uVXBkYXRvcigpIHtcbiAgICAgICAgd3guc3RhcnRMb2NhdGlvblVwZGF0ZSh7XG4gICAgICAgICAgICBmYWlsOiBjb25zb2xlLmVycm9yLFxuICAgICAgICB9KVxuICAgICAgICB3eC5vbkxvY2F0aW9uQ2hhbmdlKGxvYyA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvY2F0aW9uOiBcIiwgbG9jKVxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbG9jLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxvYy5sb25naXR1ZGUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIHNldHVwVGltZXIoKSB7XG4gICAgICAgIGxldCBlbGFwc2VkU2VjID0gMFxuICAgICAgICBsZXQgY2VudHMgPSAwXG4gICAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBlbGFwc2VkU2VjKytcbiAgICAgICAgICAgIGNlbnRzICs9IGNlbnRQZXJTZWNcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICAgICAgZWxhcHNlZDogZm9ybWF0RHVyYXRpb24oZWxhcHNlZFNlYyksXG4gICAgICAgICAgICAgICAgZmVlOiBmb3JtYXRGZWUoY2VudHMpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgMTAwMClcbiAgICB9LFxuXG4gICAgb25FbmRUcmlwVGFwKCkge1xuICAgICAgICB3eC5yZWRpcmVjdFRvKHtcbiAgICAgICAgICAgIHVybDpyb3V0aW5nLm15dHJpcHMoKSxcbiAgICAgICAgfSlcbiAgICB9XG59KSJdfQ==